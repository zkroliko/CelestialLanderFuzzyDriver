FUNCTION_BLOCK
VAR_INPUT
    vert_speed : REAL;
    height : REAL;
    positionX : REAL;
    positionY : REAL;
END_VAR

VAR_OUTPUT
    mainEngines : REAL;
    strafeX : Real;
    strafeY : Real;
END_VAR

FUZZIFY positionX
    TERM too_far_east := (0, 0) (20,0) (1000, 1) ;
    TERM nominal := (-50, 0) (-25,0.5) (25,0.5) (50, 0) ;
    TERM too_far_west := (-1000, 1) (-20, 0) (0,0);
END_FUZZIFY

FUZZIFY positionY
    TERM too_far_north := (0, 0) (20,0) (100, 1);
    TERM nominal := (-50, 0) (-35,0.5) (0,1) (e5,0.5) (50, 0) ;
    TERM too_far_south := (-100, 1) (-20, 0) (0,0);
END_FUZZIFY

FUZZIFY vert_speed
    TERM too_fast := (5,0) (10,1) (40,1);
    TERM nominal := (0, 0) (0.5, 1) (0.75, 1) (6.5, 0);
    TERM too_slow := (-5, 1) (0, 1) (2, 0);
END_FUZZIFY

FUZZIFY height
    TERM high := (500,0) (800,0.1) (1800,0.25) (3800,1);
    TERM low := (100,0) (300,1) (850,1) (1000,0.75) (1200,0.5) (1600,0);
    TERM very_low := (0,0) (10,1) (50,1) (150,0);
END_FUZZIFY

DEFUZZIFY mainEngines
    TERM retrograde := (-2,0) (-1, 1) (-0.5, 1) (0,0) ;
    TERM cutoff := (-0.5, 0) (-0.25,1) (0.25,1) (0.5, 0);
    TERM prograde := (0,0) (1, 0.25) (2, 1) (4, 0);
    METHOD : COG;
    DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY strafeX
    TERM too_far_west := (-8, 1) (-4, 1) (0, 0);
    TERM cutoff := (-5, 0) (-2.5, 1) (2.5, 1) (5,0);
    TERM too_far_east := (0, 0) (4, 1) (8, 1);
    METHOD : COG;
    DEFAULT := 0;
END_DEFUZZIFY

DEFUZZIFY strafeY
    TERM too_far_north := (0, 0) (4, 1) (8, 1);
    TERM cutoff := (-5, 0) (-2.5, 1) (2.5, 1) (5,0);
    TERM too_far_south := (-8, 1) (-4, 1) (0, 0);
    METHOD : COG;
END_DEFUZZIFY

RULEBLOCK verticalSpeedControl
    AND: MIN;
    ACT: MIN;

    RULE 0: IF vert_speed IS nominal AND height IS high THEN mainEngines IS cutoff;
    RULE 1: IF vert_speed IS too_fast AND height IS high THEN mainEngines IS cutoff;
    RULE 2: IF vert_speed IS too_slow AND height IS high THEN mainEngines IS prograde;

    RULE 3: IF vert_speed IS nominal AND height IS low  THEN mainEngines IS cutoff;
    RULE 4: IF vert_speed IS too_fast AND height IS low THEN mainEngines IS retrograde;
    RULE 5: IF vert_speed IS too_slow AND height IS low AND positionX IS nominal AND positionY IS nominal THEN mainEngines IS prograde;

    RULE 6: IF vert_speed IS nominal AND height IS very_low THEN mainEngines IS cutoff;
    RULE 7: IF (vert_speed IS too_fast AND height IS very_low) ASUM (positionX IS NOT nominal AND positionY IS NOT nominal) THEN mainEngines IS retrograde;
    RULE 8: IF vert_speed IS too_slow AND height IS very_low THEN mainEngines IS cutoff;

END_RULEBLOCK

RULEBLOCK movementInX
    AND: MIN;
    ACT: MIN;

    RULE 0: IF positionX IS nominal THEN strafeX IS cutoff;
    RULE 1: IF positionX IS too_far_west THEN strafeX IS too_far_east;
    RULE 2: IF positionX IS too_far_east THEN strafeX IS too_far_west;

END_RULEBLOCK

RULEBLOCK movementInY
    AND: MIN;
    ACT: MIN;

    RULE 0: IF positionY IS nominal THEN strafeY IS cutoff;
    RULE 1: IF positionY IS too_far_north THEN strafeY IS too_far_south;
    RULE 2: IF positionY IS too_far_south THEN strafeY IS too_far_north;

END_RULEBLOCK
END_FUNCTION_BLOCK